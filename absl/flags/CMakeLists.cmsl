import "CMake/AbseilHelpers";
import "CMake/AbseilConfigureCopts";

int main() {
  auto flags_internal = cmake::declare_library("absl::flags_internal");
  auto flags_config = cmake::declare_library("absl::flags_config");
  auto flags_marshalling = cmake::declare_library("absl::flags_marshalling");
  auto flags_handle = cmake::declare_library("absl::flags_handle");
  auto flags_registry = cmake::declare_library("absl::flags_registry");
  auto flags = cmake::declare_library("absl::flags");
  auto flags_usage = cmake::declare_library("absl::flags_usage");
  auto flags_parse = cmake::declare_library("absl::flags_parse");
  auto strings = cmake::declare_library("absl::strings");
  auto core_headers = cmake::declare_library("absl::core_headers");
  auto str_format = cmake::declare_library("absl::str_format");
  auto synchronization = cmake::declare_library("absl::synchronization");
  auto base = cmake::declare_library("absl::base");
  auto optional = cmake::declare_library("absl::optional");
  auto dynamic_annotations =
      cmake::declare_library("absl::dynamic_annotations");
  auto gmock_main = cmake::declare_library("gmock_main");

  absl::cc_library("flags_internal",
                   {.hdrs = {"internal/path_util.h", "internal/program_name.h"},
                    .srcs = {"internal/program_name.cc"},
                    .copts = absl::default_copts,
                    .linkopts = absl::default_linkopts,
                    .deps = {strings, synchronization},
                    .public = true});

  absl::cc_library("flags_config", {.hdrs = {"config.h", "usage_config.h"},
                                    .srcs = {"usage_config.cc"},
                                    .copts = absl::default_copts,
                                    .linkopts = absl::default_linkopts,
                                    .deps = {flags_internal, core_headers,
                                             strings, synchronization}});

  absl::cc_library("flags_marshalling",
                   {.hdrs = {"marshalling.h"},
                    .srcs = {"marshalling.cc"},
                    .copts = absl::default_copts,
                    .linkopts = absl::default_linkopts,
                    .deps = {core_headers, strings, str_format}});

  absl::cc_library("flags_handle", {.hdrs = {"internal/commandlineflag.h"},
                                    .srcs = {"internal/commandlineflag.cc"},
                                    .copts = absl::default_copts,
                                    .linkopts = absl::default_linkopts,
                                    .deps = {flags_config, flags_marshalling,
                                             base, core_headers, strings,
                                             synchronization, optional}});

  absl::cc_library("flags_registry",
                   {.hdrs = {"internal/registry.h", "internal/type_erased.h"},
                    .srcs = {"internal/registry.cc", "internal/type_erased.cc"},
                    .copts = absl::default_copts,
                    .linkopts = absl::default_linkopts,
                    .deps = {flags_config, flags_handle, base, core_headers,
                             dynamic_annotations, strings, synchronization}});

  absl::cc_library("flags",
                   {.hdrs = {"declare.h", "flag.h", "internal/flag.h"},
                    .srcs = {"flag.cc"},
                    .copts = absl::default_copts,
                    .linkopts = absl::default_linkopts,
                    .deps = {flags_config, flags_handle, flags_marshalling,
                             flags_registry, base, core_headers, strings}});

  absl::cc_library("flags_usage",
                   {.hdrs = {"internal/usage.h"},
                    .srcs = {"internal/usage.cc"},
                    .copts = absl::default_copts,
                    .linkopts = absl::default_linkopts,
                    .deps = {flags_config, flags, flags_handle, flags_internal,
                             strings, synchronization}});

  absl::cc_library(
      "flags_parse",
      {.hdrs = {"internal/parse.h", "parse.h"},
       .srcs = {"parse.cc"},
       .copts = absl::default_copts,
       .linkopts = absl::default_linkopts,
       .deps = {flags_config, flags, flags_handle, flags_internal,
                flags_registry, flags_usage, strings, synchronization}});

  ///////////////////////////////////////////////////////////////////////
  // Unit tests in alpahabetical order.

  absl::cc_test("flags_commandlineflag_test",
                {.srcs = {"internal/commandlineflag_test.cc"},
                 .copts = absl::test_copts,
                 .deps = {flags, flags_handle, flags_registry, memory, strings,
                          gmock_main}});

  absl::cc_test("flags_flag_test",
                {.srcs = {"flag_test.cc", "flag_test_defs.cc"},
                 .copts = absl::test_copts,
                 .deps = {flags, strings, gmock_main}});

  absl::cc_test("flags_parse_test",
                {.srcs = {"parse_test.cc"},
                 .copts = absl::test_copts,
                 .deps = {flags, base, flags_parse, scoped_set_env, span,
                          strings, gmock_main}});

  absl::cc_test("flags_path_util_test", {.srcs = {"internal/path_util_test.cc"},
                                         .copts = absl::test_copts,
                                         .deps = {flags_internal, gmock_main}});

  absl::cc_test("flags_program_name_test",
                {.srcs = {"internal/program_name_test.cc"},
                 .copts = absl::test_copts,
                 .deps = {flags_internal, strings, gmock_main}});

  absl::cc_test(
      "flags_type_erased_test",
      {.srcs = {"internal/type_erased_test.cc"},
       .copts = absl::test_copts,
       .deps = {flags, flags_registry, mermory, strings, gmock_main}});

  absl::cc_test("flags_usage_config_test",
                {.srcs = {"usage_config_test.cc"},
                 .copts = absl::test_copts,
                 .deps = {flags_config, flags_internal, strings, gmock_main}});

  absl::cc_test("flags_usage_test",
                {.srcs = {"internal/usage_test.cc"},
                 .copts = absl::test_copts,
                 .deps = {flags_config, flags, flags_internal, flags_parse,
                          flags_usage, memory, strings, gmock_main}});
}
