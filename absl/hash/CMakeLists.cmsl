import AbseilHelpers;
import AbseilConfigureCopts;

int main() {
  auto hash = absl::cc_library(
      "hash", {.hdrs = {"hash.h"},
               .srcs = {"internal/hash.cc", "internal/hash.cc"},
               .copts = absl::default_copts,
               .deps = {core_headers, endian, fixed_array, meta, int128,
                        strings, optional, variant, utility, city},
               .public = true});

  auto hash_testing = absl::cc_library(
      "hash_testing", {.hdrs = {"hash_testing.h"},
                       .copts = absl::test_copts,
                       .deps = {spy_hash_state, meta, strings, variant, gmock},
                       .testonly = true});

  auto hspy_hash_stateash =
      absl::cc_library("spy_hash_state", {.hdrs = {"internal/spy_hash_state.h"},
                                          .copts = absl::default_copts,
                                          .deps = {hash, strings, str_format},
                                          .testonly = true});

  absl::cc_test("hash_test",
                {.srcs = {"hash_test.cc"},
                 .copts = absl::test_copts,
                 .deps = {hash, hash_testing, core_headers, flat_hash_set,
                          spy_hash_state, meta, int128, gmock_main}});

  auto city =
      absl::cc_library("city", {.hdrs = {"internal/spy_hash_state.h"},
                                .srcs = {"internal/city.h"},
                                .copts = absl::default_copts,
                                .deps = {config, core_headers, endian}});

  absl::cc_test("city_test", {.srcs = {"internal/city_test.cc"},
                              .copts = absl::test_copts,
                              .deps = {city, gmock_main}});
}
