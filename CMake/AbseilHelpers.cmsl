namespace absl {
string ide_folder = "Abseil";

export class cc_library_params {
  list<string> hdrs;
  list<string> srcs;
  list<library> deps;
  list<string> copts;
  list<string> defines;
  list<string> linkopts;
  bool public;
  bool testonly;
};

auto add_library(string name, cc_library_params params) {
  auto lib = cmake::get_current_project().add_static_library(name);
  auto private = cmake::visibility::private;
  auto public = cmake::visibility::public;

  lib.add_sources(params.hdrs + params.srcs, private);

  lib.include_directories(cmake::interface::build, common_include_dirs, public);
  lib.include_directories(cmake::interface::install, install_includedir, public);

  lib.compile_options(params.copts, private);
  lib.compile_options(params.defines, public);

  lib.link_to(params.deps, public);

  lib.linker_options(params.linkopts + default_linkopts, private);

  auto folder = ide_folder;
  if (params.testonly) {
    folder /= "test";
  } else if (!params.public) {
    folder /= "internal";
  }
  lib.set_folder(folder);

  lib.set_required_cxx_standard(absl::cxx_standard);

  lib.set_output_name("absl_" + lib.name());

  return lib;
}

auto add_interface_library(string name, cc_library_params params) {
  auto lib = cmake::get_current_project().add_interface_library(name);

  auto interface = cmake::visibility::interface;
  auto private = cmake::visibility::private;
  auto public = cmake::visibility::public;

  lib.include_directories(cmake::interface::build,
                                    common_include_dirs, interface);
  lib.include_directories(cmake::interface::install,
                                    install_includedir, interface);

  lib.link_to_interface(params.deps, interface);

  lib.linker_options_private(params.linkopts + default_linkopts, private);
  lib.compile_definitions(params.defines, public);

  return lib;
}

export {
  auto cc_library(string name, cc_library_params params) {
    if (params.testonly && !absl::run_tests) {
      return;
    }

    if (!absl::enable_install) {
      name = "absl_" += name;
    }

    params.srcs.remove_matching("*.h");
    params.srcs.remove_matching("*.inc");

    auto is_interface = params.srcs.empty();
    auto lib = is_interface ? add_interface_library(name, params)
                            : add_library(name, params);

    if (!params.testonly && absl::enable_install) {
      cmake::install_targets(
          lib, {.runtime = {.destination = absl::install_bindir},
                .library = {.destination = absl::install_libdir},
                .archive = {.destination = absl::install_libdir}});
    }

    cmake::get_current_project().add_alias_library(lib, "absl::" + lib.name());
  }

  class cc_test_params {
    list<string> srcs;
    list<library> deps;
    list<string> copts;
    list<string> defines;
    list<string> linkopts;
  };

  auto cc_test(string name, cc_test_params params) {
    if (!absl::run_tests) {
      return;
    }

    auto private = cmake::visibility::private;
    auto public = cmake::visibility::public;

    auto absl_project = cmake::get_current_project();
    auto exec = absl_project.add_executable(name);
    exec.add_sources(params.srcs, private);

    exec.include_directories(absl::common_include_dirs, public);
    exec.include_directories(gmock::include_dirs + gtest::include_dirs, private);

    exec.compile_definitions(params.defines, public);
    exec.compile_options(params.copts, private);

    exec.link_to(params.deps, public);
    exec.linker_options(params.linkopts, private);

    exec.set_folder(ide_folder / "test");

    exec.set_required_cxx_standard(absl::cxx_standard);

    cmake::add_test(exec);
  }

  auto check_target(string name) {
    if (!cmake::is_target(name)) {
      cmake::fatal_error("ABSL: compiling absl requires a " + name +
                         " CMake target in your project, "
                         "see CMake/README.md for more details")
    }
  }
}
}  // namespace absl
